// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.progsquad.chessmanager.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import ro.progsquad.chessmanager.model.Team;
import ro.progsquad.chessmanager.model.TeamDataOnDemand;

privileged aspect TeamDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TeamDataOnDemand: @Component;
    
    private Random TeamDataOnDemand.rnd = new SecureRandom();
    
    private List<Team> TeamDataOnDemand.data;
    
    public Team TeamDataOnDemand.getNewTransientTeam(int index) {
        Team obj = new Team();
        setTeamId(obj, index);
        setTeamName(obj, index);
        return obj;
    }
    
    public void TeamDataOnDemand.setTeamId(Team obj, int index) {
        Long teamId = new Integer(index).longValue();
        obj.setTeamId(teamId);
    }
    
    public void TeamDataOnDemand.setTeamName(Team obj, int index) {
        String teamName = "teamName_" + index;
        obj.setTeamName(teamName);
    }
    
    public Team TeamDataOnDemand.getSpecificTeam(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Team obj = data.get(index);
        Long id = obj.getId();
        return Team.findTeam(id);
    }
    
    public Team TeamDataOnDemand.getRandomTeam() {
        init();
        Team obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Team.findTeam(id);
    }
    
    public boolean TeamDataOnDemand.modifyTeam(Team obj) {
        return false;
    }
    
    public void TeamDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Team.findTeamEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Team' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Team>();
        for (int i = 0; i < 10; i++) {
            Team obj = getNewTransientTeam(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
