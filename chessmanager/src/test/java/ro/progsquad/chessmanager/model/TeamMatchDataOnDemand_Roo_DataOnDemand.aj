// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.progsquad.chessmanager.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.progsquad.chessmanager.model.Team;
import ro.progsquad.chessmanager.model.TeamDataOnDemand;
import ro.progsquad.chessmanager.model.TeamMatch;
import ro.progsquad.chessmanager.model.TeamMatchDataOnDemand;

privileged aspect TeamMatchDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TeamMatchDataOnDemand: @Component;
    
    private Random TeamMatchDataOnDemand.rnd = new SecureRandom();
    
    private List<TeamMatch> TeamMatchDataOnDemand.data;
    
    @Autowired
    TeamDataOnDemand TeamMatchDataOnDemand.teamDataOnDemand;
    
    public TeamMatch TeamMatchDataOnDemand.getNewTransientTeamMatch(int index) {
        TeamMatch obj = new TeamMatch();
        setChallengerTeam(obj, index);
        setEndDate(obj, index);
        setGameType(obj, index);
        setIsRated(obj, index);
        setRatingRange(obj, index);
        setResponderTeam(obj, index);
        setSimultaneousGames(obj, index);
        setStartDate(obj, index);
        setStartingPosition(obj, index);
        setTeamMatchId(obj, index);
        setTeamMatchName(obj, index);
        setTimePerMove(obj, index);
        return obj;
    }
    
    public void TeamMatchDataOnDemand.setChallengerTeam(TeamMatch obj, int index) {
        Team challengerTeam = teamDataOnDemand.getRandomTeam();
        obj.setChallengerTeam(challengerTeam);
    }
    
    public void TeamMatchDataOnDemand.setEndDate(TeamMatch obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void TeamMatchDataOnDemand.setGameType(TeamMatch obj, int index) {
        String gameType = "gameType_" + index;
        obj.setGameType(gameType);
    }
    
    public void TeamMatchDataOnDemand.setIsRated(TeamMatch obj, int index) {
        Boolean isRated = Boolean.TRUE;
        obj.setIsRated(isRated);
    }
    
    public void TeamMatchDataOnDemand.setRatingRange(TeamMatch obj, int index) {
        String ratingRange = "ratingRange_" + index;
        obj.setRatingRange(ratingRange);
    }
    
    public void TeamMatchDataOnDemand.setResponderTeam(TeamMatch obj, int index) {
        Team responderTeam = teamDataOnDemand.getRandomTeam();
        obj.setResponderTeam(responderTeam);
    }
    
    public void TeamMatchDataOnDemand.setSimultaneousGames(TeamMatch obj, int index) {
        Integer simultaneousGames = new Integer(index);
        if (simultaneousGames < 1 || simultaneousGames > 2) {
            simultaneousGames = 2;
        }
        obj.setSimultaneousGames(simultaneousGames);
    }
    
    public void TeamMatchDataOnDemand.setStartDate(TeamMatch obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void TeamMatchDataOnDemand.setStartingPosition(TeamMatch obj, int index) {
        String startingPosition = "startingPosition_" + index;
        obj.setStartingPosition(startingPosition);
    }
    
    public void TeamMatchDataOnDemand.setTeamMatchId(TeamMatch obj, int index) {
        Long teamMatchId = new Integer(index).longValue();
        obj.setTeamMatchId(teamMatchId);
    }
    
    public void TeamMatchDataOnDemand.setTeamMatchName(TeamMatch obj, int index) {
        String teamMatchName = "teamMatchName_" + index;
        obj.setTeamMatchName(teamMatchName);
    }
    
    public void TeamMatchDataOnDemand.setTimePerMove(TeamMatch obj, int index) {
        String timePerMove = "timePerMove_" + index;
        obj.setTimePerMove(timePerMove);
    }
    
    public TeamMatch TeamMatchDataOnDemand.getSpecificTeamMatch(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TeamMatch obj = data.get(index);
        Long id = obj.getId();
        return TeamMatch.findTeamMatch(id);
    }
    
    public TeamMatch TeamMatchDataOnDemand.getRandomTeamMatch() {
        init();
        TeamMatch obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return TeamMatch.findTeamMatch(id);
    }
    
    public boolean TeamMatchDataOnDemand.modifyTeamMatch(TeamMatch obj) {
        return false;
    }
    
    public void TeamMatchDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TeamMatch.findTeamMatchEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TeamMatch' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TeamMatch>();
        for (int i = 0; i < 10; i++) {
            TeamMatch obj = getNewTransientTeamMatch(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
