// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.progsquad.chessmanager.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.progsquad.chessmanager.model.Game;
import ro.progsquad.chessmanager.model.GameDataOnDemand;
import ro.progsquad.chessmanager.model.Player;
import ro.progsquad.chessmanager.model.PlayerDataOnDemand;
import ro.progsquad.chessmanager.model.TeamMatchDataOnDemand;

privileged aspect GameDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GameDataOnDemand: @Component;
    
    private Random GameDataOnDemand.rnd = new SecureRandom();
    
    private List<Game> GameDataOnDemand.data;
    
    @Autowired
    PlayerDataOnDemand GameDataOnDemand.playerDataOnDemand;
    
    @Autowired
    TeamMatchDataOnDemand GameDataOnDemand.teamMatchDataOnDemand;
    
    public Game GameDataOnDemand.getNewTransientGame(int index) {
        Game obj = new Game();
        setBlack(obj, index);
        setEndDate(obj, index);
        setGameId(obj, index);
        setNumberOfMoves(obj, index);
        setStartDate(obj, index);
        setTimePerMove(obj, index);
        setWhite(obj, index);
        setWonOnTime(obj, index);
        return obj;
    }
    
    public void GameDataOnDemand.setBlack(Game obj, int index) {
        Player black = playerDataOnDemand.getRandomPlayer();
        obj.setBlack(black);
    }
    
    public void GameDataOnDemand.setEndDate(Game obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void GameDataOnDemand.setGameId(Game obj, int index) {
        Long gameId = new Integer(index).longValue();
        obj.setGameId(gameId);
    }
    
    public void GameDataOnDemand.setNumberOfMoves(Game obj, int index) {
        Integer numberOfMoves = 0;
        if (numberOfMoves < 0) {
            numberOfMoves = 0;
        }
        obj.setNumberOfMoves(numberOfMoves);
    }
    
    public void GameDataOnDemand.setStartDate(Game obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void GameDataOnDemand.setTimePerMove(Game obj, int index) {
        String timePerMove = "_" + index;
        obj.setTimePerMove(timePerMove);
    }
    
    public void GameDataOnDemand.setWhite(Game obj, int index) {
        Player white = playerDataOnDemand.getRandomPlayer();
        obj.setWhite(white);
    }
    
    public void GameDataOnDemand.setWonOnTime(Game obj, int index) {
        Boolean wonOnTime = false;
        obj.setWonOnTime(wonOnTime);
    }
    
    public Game GameDataOnDemand.getSpecificGame(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Game obj = data.get(index);
        Long id = obj.getId();
        return Game.findGame(id);
    }
    
    public Game GameDataOnDemand.getRandomGame() {
        init();
        Game obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Game.findGame(id);
    }
    
    public boolean GameDataOnDemand.modifyGame(Game obj) {
        return false;
    }
    
    public void GameDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Game.findGameEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Game' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Game>();
        for (int i = 0; i < 10; i++) {
            Game obj = getNewTransientGame(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
